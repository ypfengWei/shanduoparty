<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.shanduo.party.mapper.DynamicCommentMapper">
  <resultMap id="BaseResultMap" type="com.shanduo.party.entity.DynamicComment">
    <id column="id" jdbcType="VARCHAR" property="id" />
    <result column="dynamic_id" jdbcType="VARCHAR" property="dynamicId" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="comment" jdbcType="VARCHAR" property="comment" />
    <result column="reply_type" jdbcType="CHAR" property="replyType" />
    <result column="comment_id" jdbcType="VARCHAR" property="commentId" />
    <result column="reply_comment_id" jdbcType="VARCHAR" property="replyCommentId" />
    <result column="remarks" jdbcType="VARCHAR" property="remarks" />
    <result column="create_date" jdbcType="TIMESTAMP" property="createDate" />
    <result column="update_date" jdbcType="TIMESTAMP" property="updateDate" />
    <result column="del_flag" jdbcType="CHAR" property="delFlag" />
  </resultMap>
  <sql id="Base_Column_List">
    id, dynamic_id, user_id, comment, reply_type, comment_id, reply_comment_id, remarks, 
    create_date, update_date, del_flag
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from dynamic_comment
    where id = #{id,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from dynamic_comment
    where id = #{id,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="com.shanduo.party.entity.DynamicComment">
    insert into dynamic_comment (id, dynamic_id, user_id, 
      comment, reply_type, comment_id, 
      reply_comment_id, remarks, create_date, 
      update_date, del_flag)
    values (#{id,jdbcType=VARCHAR}, #{dynamicId,jdbcType=VARCHAR}, #{userId,jdbcType=INTEGER}, 
      #{comment,jdbcType=VARCHAR}, #{replyType,jdbcType=CHAR}, #{commentId,jdbcType=VARCHAR}, 
      #{replyCommentId,jdbcType=VARCHAR}, #{remarks,jdbcType=VARCHAR}, #{createDate,jdbcType=TIMESTAMP}, 
      #{updateDate,jdbcType=TIMESTAMP}, #{delFlag,jdbcType=CHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.shanduo.party.entity.DynamicComment">
    insert into dynamic_comment
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="dynamicId != null">
        dynamic_id,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="comment != null">
        comment,
      </if>
      <if test="replyType != null">
        reply_type,
      </if>
      <if test="commentId != null">
        comment_id,
      </if>
      <if test="replyCommentId != null">
        reply_comment_id,
      </if>
      <if test="remarks != null">
        remarks,
      </if>
      <if test="createDate != null">
        create_date,
      </if>
      <if test="updateDate != null">
        update_date,
      </if>
      <if test="delFlag != null">
        del_flag,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=VARCHAR},
      </if>
      <if test="dynamicId != null">
        #{dynamicId,jdbcType=VARCHAR},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="comment != null">
        #{comment,jdbcType=VARCHAR},
      </if>
      <if test="replyType != null">
        #{replyType,jdbcType=CHAR},
      </if>
      <if test="commentId != null">
        #{commentId,jdbcType=VARCHAR},
      </if>
      <if test="replyCommentId != null">
        #{replyCommentId,jdbcType=VARCHAR},
      </if>
      <if test="remarks != null">
        #{remarks,jdbcType=VARCHAR},
      </if>
      <if test="createDate != null">
        #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="updateDate != null">
        #{updateDate,jdbcType=TIMESTAMP},
      </if>
      <if test="delFlag != null">
        #{delFlag,jdbcType=CHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.shanduo.party.entity.DynamicComment">
    update dynamic_comment
    <set>
      <if test="dynamicId != null">
        dynamic_id = #{dynamicId,jdbcType=VARCHAR},
      </if>
      <if test="userId != null">
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="comment != null">
        comment = #{comment,jdbcType=VARCHAR},
      </if>
      <if test="replyType != null">
        reply_type = #{replyType,jdbcType=CHAR},
      </if>
      <if test="commentId != null">
        comment_id = #{commentId,jdbcType=VARCHAR},
      </if>
      <if test="replyCommentId != null">
        reply_comment_id = #{replyCommentId,jdbcType=VARCHAR},
      </if>
      <if test="remarks != null">
        remarks = #{remarks,jdbcType=VARCHAR},
      </if>
      <if test="createDate != null">
        create_date = #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="updateDate != null">
        update_date = #{updateDate,jdbcType=TIMESTAMP},
      </if>
      <if test="delFlag != null">
        del_flag = #{delFlag,jdbcType=CHAR},
      </if>
    </set>
    where id = #{id,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.shanduo.party.entity.DynamicComment">
    update dynamic_comment
    set dynamic_id = #{dynamicId,jdbcType=VARCHAR},
      user_id = #{userId,jdbcType=INTEGER},
      comment = #{comment,jdbcType=VARCHAR},
      reply_type = #{replyType,jdbcType=CHAR},
      comment_id = #{commentId,jdbcType=VARCHAR},
      reply_comment_id = #{replyCommentId,jdbcType=VARCHAR},
      remarks = #{remarks,jdbcType=VARCHAR},
      create_date = #{createDate,jdbcType=TIMESTAMP},
      update_date = #{updateDate,jdbcType=TIMESTAMP},
      del_flag = #{delFlag,jdbcType=CHAR}
    where id = #{id,jdbcType=VARCHAR}
  </update>
  
  <update id="updateByDelFlag">
    update dynamic_comment
    set
      del_flag = '1'
    where del_flag = '0' and (id = #{0} and user_id = #{1})
    or (comment_id = #{0})
  </update>
  <select id="dynamicIdCount" parameterType="java.lang.String" resultType="java.lang.Integer">
    select
    count(id)
    from dynamic_comment
    where del_flag = '0'
    and dynamic_id = #{dynamicId,jdbcType=VARCHAR}
  </select>
  <select id="commentCount" parameterType="java.lang.String" resultType="java.lang.Integer">
    select
    count(id)
    from dynamic_comment
    where del_flag = '0'
    and reply_type = '1'
    and dynamic_id = #{dynamicId,jdbcType=VARCHAR}
  </select>
  <select id="oneCommentIdList" resultType="map">
	select
  		ac.id,ac.dynamic_id as dynamicId,su.id as userId,su.head_portrait_id as portraitId,
  		su.user_name as `name`,ac.`comment`,su.gender,su.birthday as age,
  		ac.create_date as createDate
	from dynamic_comment ac
	join shanduo_user su on ac.user_id = su.id
	where ac.del_flag = '0'
	and ac.reply_type = '1'
	and ac.dynamic_id = #{0}
	order by ac.create_date
	limit #{1},#{2}
  </select>
  <select id="commentsCount" parameterType="java.lang.String" resultType="java.lang.Integer">
    select
    count(id)
    from dynamic_comment
    where del_flag = '0'
    and reply_type = '2'
    and comment_id = #{commentId,jdbcType=VARCHAR}
  </select>
  <select id="twoCommentIdList" resultType="map">
	select
		dc.id,dc.dynamic_id as dynamicId,dc.comment_id as commentId,
 		usOne.id as userId,usOne.user_name as userName,usOne.head_portrait_id as portraitId,
 		usTwo.id as replyId,usTwo.user_name as replyName,
 		dc.`comment`,dc.create_date as createDate
	from dynamic_comment dc
	 	join shanduo_user usOne on usOne.id = dc.user_id
	 	join dynamic_comment ac on ac.id = dc.reply_comment_id
	 	join shanduo_user usTwo on usTwo.id = ac.user_id
	where dc.del_flag = '0'
	and dc.reply_type = '2'
	and dc.comment_id = #{0}
	order by dc.create_date
	limit #{1},#{2}
  </select>
  <select id="selectByCommentId" parameterType="java.lang.String" resultType="map">
	select
  		ac.id,ac.dynamic_id as dynamicId,su.id as userId,su.head_portrait_id as portraitId,
  		su.user_name as `name`,ac.`comment`,su.gender,su.birthday as age,
  		ac.create_date as createDate
	from dynamic_comment ac
	join shanduo_user su on ac.user_id = su.id
	where ac.del_flag = '0'
	and ac.reply_type = '1'
	and ac.id = #{commentId}
  </select>
  <select id="myMessageCount" parameterType="java.lang.Integer" resultType="java.lang.Integer">
  	select
		count(dc.id)
	from dynamic_comment dc
	join shanduo_dynamic sd on sd.id = dc.dynamic_id
	where dc.del_flag = '0' and sd.del_flag = '0'
	and (
		(sd.user_id = #{userId} and dc.reply_type = '1') 
			or 
		(dc.reply_comment_id in (select id from dynamic_comment where user_id = #{userId} and del_flag = '0'))
		)
  </select>
  <select id="myMessage" resultType="map">
  	select
		dc.id,dc.user_id as replyUserId,dcus.user_name as replyName,dcus.head_portrait_id as portraitId,dcus.birthday as age,dcus.gender,
		dc.`comment` as replyComment,dc.reply_type as type,dc.comment_id as commentId,
		dc.dynamic_id as dynamicId,sd.user_id as issueId,dyus.user_name as issueName,sd.content,sd.picture,sd.location,
		dc2.user_id as userId,dcus2.user_name as `name`,dc2.`comment`
	from dynamic_comment dc
		join shanduo_user dcus on dcus.id = dc.user_id
		join shanduo_dynamic sd on sd.id = dc.dynamic_id
		join shanduo_user dyus on dyus.id = sd.user_id
		left join dynamic_comment dc2 on dc.reply_comment_id = dc2.id
		left join shanduo_user dcus2 on dcus2.id = dc2.user_id
	where dc.del_flag = '0' and sd.del_flag = '0'
	and (
		(sd.user_id = #{0} and dc.reply_type = '1')
		or
		(dc.reply_comment_id in (select id from dynamic_comment where user_id = #{0} and del_flag = '0'))
		)
	order by dc.create_date desc 
	limit #{1},#{2}
  </select>
</mapper>